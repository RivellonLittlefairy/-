#include<stdio.h>
#include <stdlib.h>
struct stack{
	char* base;
	char* top;
	int size;
};
void initStack(stack &s){
    s.base=(char*)malloc(10*sizeof(char));
    s.top=s.base;
    s.size=10;
}
void push(stack &s,char e){
	if(s.top-s.base>=s.size){
		s.base=(char*)realloc(s.base,(s.size+10)*sizeof(char));
		s.top=s.base+10;
	    s.size+=10;
	}
    *s.top++=e;
}
void  pop(stack &s,char &e){
    if(s.base==s.top){
    	printf("�˴�����ƥ�䲻�Ϸ�"); 
		exit (0);}
	e=*--s.top;

}
void clearStack(stack &s) {
	s.top=s.base;
	free(s.base);
}
bool isEmpty(stack &s){
	if(s.base==s.top) return true;	
	else return false;
}
int main(){
	char a[100]; 
    printf("���������ַ�(������100��)��");
    gets(a);
    char m;
	int i = 0;
	stack S;
	initStack(S);
	while(a[i] != '#'){
		switch(a[i]){
			case '(':
				push(S,'(');
				break;
			case '[':
				push(S,'[');
				break;
			case '{':
				push(S,'{');
				break;
			case ')':
				
				pop(S,m);
				if(m == '('){
					break;
				}else{
					printf("�˴�����ƥ�䲻�Ϸ�");
					exit(0);
				}
			case ']':
				
				pop(S,m);
				if(m == '['){
					break;
				}else{
					printf("�˴�����ƥ�䲻�Ϸ�");
					exit(0);
				}
			case '}':
				
				pop(S,m);
				if(m == '{'){
					break;
				}else{
					printf("�˴�����ƥ�䲻�Ϸ�");
					exit(0);
				}
			default:
				printf("�˴�����ƥ�䲻�Ϸ�");	
				break; 
		}
		i++;
	}
	if(isEmpty(S)){
	   printf("匹配"); 
	}
	else printf("�˴�����ƥ�䲻�Ϸ�");
	                   //�ж������Ƿ�Ϊ�� 
	
	system("pause");
	return 0;
}
